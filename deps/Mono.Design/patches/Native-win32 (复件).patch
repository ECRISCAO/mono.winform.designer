--- class/System.Design/System.Windows.Forms.Design/Native.cs	2008-07-10 16:24:08.000000000 +0100
+++ class/System.Design/System.Windows.Forms.Design/Native.cs	2008-04-07 14:28:36.000000000 +0100
@@ -40,16 +40,18 @@
 	{
 
 		private static Type _xplatuiType;
+		private static bool _onMSNET;
 		
 		static Native ()
 		{
-			Assembly assembly = Assembly.Load (Consts.AssemblySystem_Windows_Forms);
+			_onMSNET = false;
+                        Assembly assembly = Assembly.Load (Consts.AssemblySystem_Windows_Forms);
 			if (assembly == null)
 				throw new InvalidOperationException ("Can't load System.Windows.Forms assembly.");
 			
 			_xplatuiType = assembly.GetType ("System.Windows.Forms.XplatUI");
 			if (_xplatuiType == null)
-				throw new InvalidOperationException ("Can't find the System.Windows.Forms.XplatUI type.");
+				_onMSNET = true;
 		}
 
 		private static object InvokeMethod (string methodName, object[] args)
@@ -78,19 +80,27 @@
 
 		public static void DefWndProc (ref Message m)
 		{   
-			object[] args = new object[] { m };
-			m.Result = (IntPtr) InvokeMethod ("DefWndProc", args);
-			m = (Message) args[0];
+			if (_onMSNET) {
+				m.Result = DefWindowProc (m.HWnd, m.Msg, m.WParam, m.LParam);
+			}
+			else {
+				object[] args = new object[] { m };
+				m.Result = (IntPtr) InvokeMethod ("DefWndProc", args);
+				m = (Message) args[0];
+			}
 		}
 
 		public static IntPtr SendMessage (IntPtr hwnd, Msg message, IntPtr wParam, IntPtr lParam)
 		{
-
-			Assembly assembly = Assembly.Load (Consts.AssemblySystem_Windows_Forms);
-			Type refType = assembly.GetType ("System.Windows.Forms.Message&");
-			object[] args = new object[] { Message.Create (hwnd, (int)message, wParam, lParam) };
-			InvokeMethod ("SendMessage", args, new Type[] { refType });
-			return ((Message)args[0]).Result;
+			if (_onMSNET) {
+				return SendMessage_Win32 (hwnd, (int) message, wParam, lParam);
+			} else {
+				Assembly assembly = Assembly.Load (Consts.AssemblySystem_Windows_Forms);
+				Type refType = assembly.GetType ("System.Windows.Forms.Message&");
+				object[] args = new object[] { Message.Create (hwnd, (int)message, wParam, lParam) };
+				InvokeMethod ("SendMessage", args, new Type[] { refType });
+				return ((Message)args[0]).Result;
+			}
 		}
 
 		public static Point PointToClient (Control control, Point point)
@@ -98,14 +108,24 @@
 			if (control == null)
 				throw new ArgumentNullException ("control");
 
-			object[] args = new object[] { control.Handle, point.X, point.Y };
-			InvokeMethod ("ScreenToClient", args);
-			return new Point ((int) args[1], (int) args[2]);
+			if (_onMSNET) {
+				POINT pt = new POINT (point.X, point.Y);
+				ScreenToClient (control.Handle, ref pt);
+				return new Point (pt.X, pt.Y);
+			}
+			else {
+				object[] args = new object[] { control.Handle, point.X, point.Y };
+				InvokeMethod ("ScreenToClient", args);
+				return new Point ((int) args[1], (int) args[2]);
+			}
 		}
 
 		public static IntPtr SetParent (IntPtr childHandle, IntPtr parentHandle)
 		{
-			return (IntPtr) InvokeMethod ("SetParent", new object[] { childHandle, parentHandle });
+			if (_onMSNET)
+				return SetParent_Win32 (childHandle, parentHandle);
+			else
+				return (IntPtr) InvokeMethod ("SetParent", new object[] { childHandle, parentHandle });
 		}
 		
 		
@@ -211,6 +231,31 @@
 			//
 			WM_MOUSE_ENTER			= 0x0401,
 		}
+
+#region Win32 Native Method Signatures
+		[StructLayout(LayoutKind.Sequential)]
+		private struct POINT {
+			public POINT (int x, int y) {
+				this.X = x;
+				this.Y = y;
+			}
+			
+			public int X;
+			public int Y;
+		}
+
+		[DllImport("user32.dll", CharSet=CharSet.Auto)]
+		private static extern IntPtr DefWindowProc (IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
+		
+		[DllImport ("user32.dll", EntryPoint = "SendMessage", CharSet = CharSet.Auto)]
+		private static extern IntPtr SendMessage_Win32 (IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
+
+		[DllImport ("user32.dll", CharSet = CharSet.Auto)]
+		private static extern bool ScreenToClient (IntPtr hWnd, ref POINT pt);
+	
+		[DllImport ("user32.dll", EntryPoint = "SetParent", CharSet = CharSet.Auto)]
+		private static extern IntPtr SetParent_Win32 (IntPtr childHandle, IntPtr parentHandle);
+#endregion
 	}
 }
 
